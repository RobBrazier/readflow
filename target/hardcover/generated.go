// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package hardcover

import (
	"context"
	"encoding/json"
	"fmt"
	"time"

	"github.com/Khan/genqlient/graphql"
)

// Book includes the GraphQL fields of books requested by the fragment Book.
// The GraphQL type's documentation follows.
//
// columns and relationships of "books"
type Book struct {
	Id    int    `json:"id"`
	Slug  string `json:"slug"`
	Title string `json:"title"`
}

// GetId returns Book.Id, and is useful for accessing the field via an interface.
func (v *Book) GetId() int { return v.Id }

// GetSlug returns Book.Slug, and is useful for accessing the field via an interface.
func (v *Book) GetSlug() string { return v.Slug }

// GetTitle returns Book.Title, and is useful for accessing the field via an interface.
func (v *Book) GetTitle() string { return v.Title }

// ChangeBookStatusResponse is returned by ChangeBookStatus on success.
type ChangeBookStatusResponse struct {
	// update_user_book
	Update_user_book ChangeBookStatusUpdate_user_bookUserBookIdType `json:"update_user_book"`
}

// GetUpdate_user_book returns ChangeBookStatusResponse.Update_user_book, and is useful for accessing the field via an interface.
func (v *ChangeBookStatusResponse) GetUpdate_user_book() ChangeBookStatusUpdate_user_bookUserBookIdType {
	return v.Update_user_book
}

// ChangeBookStatusUpdate_user_bookUserBookIdType includes the requested fields of the GraphQL type UserBookIdType.
type ChangeBookStatusUpdate_user_bookUserBookIdType struct {
	Id    int    `json:"id"`
	Error string `json:"error"`
}

// GetId returns ChangeBookStatusUpdate_user_bookUserBookIdType.Id, and is useful for accessing the field via an interface.
func (v *ChangeBookStatusUpdate_user_bookUserBookIdType) GetId() int { return v.Id }

// GetError returns ChangeBookStatusUpdate_user_bookUserBookIdType.Error, and is useful for accessing the field via an interface.
func (v *ChangeBookStatusUpdate_user_bookUserBookIdType) GetError() string { return v.Error }

// CreateUserBookInsert_user_bookUserBookIdType includes the requested fields of the GraphQL type UserBookIdType.
type CreateUserBookInsert_user_bookUserBookIdType struct {
	Id        int                                                             `json:"id"`
	Error     string                                                          `json:"error"`
	User_book CreateUserBookInsert_user_bookUserBookIdTypeUser_bookUser_books `json:"user_book"`
}

// GetId returns CreateUserBookInsert_user_bookUserBookIdType.Id, and is useful for accessing the field via an interface.
func (v *CreateUserBookInsert_user_bookUserBookIdType) GetId() int { return v.Id }

// GetError returns CreateUserBookInsert_user_bookUserBookIdType.Error, and is useful for accessing the field via an interface.
func (v *CreateUserBookInsert_user_bookUserBookIdType) GetError() string { return v.Error }

// GetUser_book returns CreateUserBookInsert_user_bookUserBookIdType.User_book, and is useful for accessing the field via an interface.
func (v *CreateUserBookInsert_user_bookUserBookIdType) GetUser_book() CreateUserBookInsert_user_bookUserBookIdTypeUser_bookUser_books {
	return v.User_book
}

// CreateUserBookInsert_user_bookUserBookIdTypeUser_bookUser_books includes the requested fields of the GraphQL type user_books.
// The GraphQL type's documentation follows.
//
// columns and relationships of "user_books"
type CreateUserBookInsert_user_bookUserBookIdTypeUser_bookUser_books struct {
	// An array relationship
	User_book_reads []CreateUserBookInsert_user_bookUserBookIdTypeUser_bookUser_booksUser_book_reads `json:"user_book_reads"`
}

// GetUser_book_reads returns CreateUserBookInsert_user_bookUserBookIdTypeUser_bookUser_books.User_book_reads, and is useful for accessing the field via an interface.
func (v *CreateUserBookInsert_user_bookUserBookIdTypeUser_bookUser_books) GetUser_book_reads() []CreateUserBookInsert_user_bookUserBookIdTypeUser_bookUser_booksUser_book_reads {
	return v.User_book_reads
}

// CreateUserBookInsert_user_bookUserBookIdTypeUser_bookUser_booksUser_book_reads includes the requested fields of the GraphQL type user_book_reads.
// The GraphQL type's documentation follows.
//
// columns and relationships of "user_book_reads"
type CreateUserBookInsert_user_bookUserBookIdTypeUser_bookUser_booksUser_book_reads struct {
	UserBookReads `json:"-"`
}

// GetId returns CreateUserBookInsert_user_bookUserBookIdTypeUser_bookUser_booksUser_book_reads.Id, and is useful for accessing the field via an interface.
func (v *CreateUserBookInsert_user_bookUserBookIdTypeUser_bookUser_booksUser_book_reads) GetId() int {
	return v.UserBookReads.Id
}

// GetProgress returns CreateUserBookInsert_user_bookUserBookIdTypeUser_bookUser_booksUser_book_reads.Progress, and is useful for accessing the field via an interface.
func (v *CreateUserBookInsert_user_bookUserBookIdTypeUser_bookUser_booksUser_book_reads) GetProgress() float32 {
	return v.UserBookReads.Progress
}

// GetProgress_pages returns CreateUserBookInsert_user_bookUserBookIdTypeUser_bookUser_booksUser_book_reads.Progress_pages, and is useful for accessing the field via an interface.
func (v *CreateUserBookInsert_user_bookUserBookIdTypeUser_bookUser_booksUser_book_reads) GetProgress_pages() int {
	return v.UserBookReads.Progress_pages
}

// GetStarted_at returns CreateUserBookInsert_user_bookUserBookIdTypeUser_bookUser_booksUser_book_reads.Started_at, and is useful for accessing the field via an interface.
func (v *CreateUserBookInsert_user_bookUserBookIdTypeUser_bookUser_booksUser_book_reads) GetStarted_at() time.Time {
	return v.UserBookReads.Started_at
}

// GetFinished_at returns CreateUserBookInsert_user_bookUserBookIdTypeUser_bookUser_booksUser_book_reads.Finished_at, and is useful for accessing the field via an interface.
func (v *CreateUserBookInsert_user_bookUserBookIdTypeUser_bookUser_booksUser_book_reads) GetFinished_at() time.Time {
	return v.UserBookReads.Finished_at
}

// GetEdition returns CreateUserBookInsert_user_bookUserBookIdTypeUser_bookUser_booksUser_book_reads.Edition, and is useful for accessing the field via an interface.
func (v *CreateUserBookInsert_user_bookUserBookIdTypeUser_bookUser_booksUser_book_reads) GetEdition() Edition {
	return v.UserBookReads.Edition
}

func (v *CreateUserBookInsert_user_bookUserBookIdTypeUser_bookUser_booksUser_book_reads) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CreateUserBookInsert_user_bookUserBookIdTypeUser_bookUser_booksUser_book_reads
		graphql.NoUnmarshalJSON
	}
	firstPass.CreateUserBookInsert_user_bookUserBookIdTypeUser_bookUser_booksUser_book_reads = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.UserBookReads)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCreateUserBookInsert_user_bookUserBookIdTypeUser_bookUser_booksUser_book_reads struct {
	Id int `json:"id"`

	Progress float32 `json:"progress"`

	Progress_pages int `json:"progress_pages"`

	Started_at json.RawMessage `json:"started_at"`

	Finished_at json.RawMessage `json:"finished_at"`

	Edition Edition `json:"edition"`
}

func (v *CreateUserBookInsert_user_bookUserBookIdTypeUser_bookUser_booksUser_book_reads) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CreateUserBookInsert_user_bookUserBookIdTypeUser_bookUser_booksUser_book_reads) __premarshalJSON() (*__premarshalCreateUserBookInsert_user_bookUserBookIdTypeUser_bookUser_booksUser_book_reads, error) {
	var retval __premarshalCreateUserBookInsert_user_bookUserBookIdTypeUser_bookUser_booksUser_book_reads

	retval.Id = v.UserBookReads.Id
	retval.Progress = v.UserBookReads.Progress
	retval.Progress_pages = v.UserBookReads.Progress_pages
	{

		dst := &retval.Started_at
		src := v.UserBookReads.Started_at
		var err error
		*dst, err = MarshalHardcoverDate(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal CreateUserBookInsert_user_bookUserBookIdTypeUser_bookUser_booksUser_book_reads.UserBookReads.Started_at: %w", err)
		}
	}
	{

		dst := &retval.Finished_at
		src := v.UserBookReads.Finished_at
		var err error
		*dst, err = MarshalHardcoverDate(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal CreateUserBookInsert_user_bookUserBookIdTypeUser_bookUser_booksUser_book_reads.UserBookReads.Finished_at: %w", err)
		}
	}
	retval.Edition = v.UserBookReads.Edition
	return &retval, nil
}

// CreateUserBookResponse is returned by CreateUserBook on success.
type CreateUserBookResponse struct {
	// insert_user_book
	Insert_user_book CreateUserBookInsert_user_bookUserBookIdType `json:"insert_user_book"`
}

// GetInsert_user_book returns CreateUserBookResponse.Insert_user_book, and is useful for accessing the field via an interface.
func (v *CreateUserBookResponse) GetInsert_user_book() CreateUserBookInsert_user_bookUserBookIdType {
	return v.Insert_user_book
}

// Edition includes the GraphQL fields of editions requested by the fragment Edition.
// The GraphQL type's documentation follows.
//
// columns and relationships of "editions"
type Edition struct {
	Id    int `json:"id"`
	Pages int `json:"pages"`
}

// GetId returns Edition.Id, and is useful for accessing the field via an interface.
func (v *Edition) GetId() int { return v.Id }

// GetPages returns Edition.Pages, and is useful for accessing the field via an interface.
func (v *Edition) GetPages() int { return v.Pages }

// FinishBookProgressResponse is returned by FinishBookProgress on success.
type FinishBookProgressResponse struct {
	// update_user_book_read
	Update_user_book_read FinishBookProgressUpdate_user_book_readUserBookReadIdType `json:"update_user_book_read"`
}

// GetUpdate_user_book_read returns FinishBookProgressResponse.Update_user_book_read, and is useful for accessing the field via an interface.
func (v *FinishBookProgressResponse) GetUpdate_user_book_read() FinishBookProgressUpdate_user_book_readUserBookReadIdType {
	return v.Update_user_book_read
}

// FinishBookProgressUpdate_user_book_readUserBookReadIdType includes the requested fields of the GraphQL type UserBookReadIdType.
type FinishBookProgressUpdate_user_book_readUserBookReadIdType struct {
	Id    int    `json:"id"`
	Error string `json:"error"`
}

// GetId returns FinishBookProgressUpdate_user_book_readUserBookReadIdType.Id, and is useful for accessing the field via an interface.
func (v *FinishBookProgressUpdate_user_book_readUserBookReadIdType) GetId() int { return v.Id }

// GetError returns FinishBookProgressUpdate_user_book_readUserBookReadIdType.Error, and is useful for accessing the field via an interface.
func (v *FinishBookProgressUpdate_user_book_readUserBookReadIdType) GetError() string { return v.Error }

// GetCurrentUserMeUsers includes the requested fields of the GraphQL type users.
// The GraphQL type's documentation follows.
//
// columns and relationships of "users"
type GetCurrentUserMeUsers struct {
	Id int `json:"id"`
}

// GetId returns GetCurrentUserMeUsers.Id, and is useful for accessing the field via an interface.
func (v *GetCurrentUserMeUsers) GetId() int { return v.Id }

// GetCurrentUserResponse is returned by GetCurrentUser on success.
type GetCurrentUserResponse struct {
	// execute function "me" which returns "users"
	Me []GetCurrentUserMeUsers `json:"me"`
}

// GetMe returns GetCurrentUserResponse.Me, and is useful for accessing the field via an interface.
func (v *GetCurrentUserResponse) GetMe() []GetCurrentUserMeUsers { return v.Me }

// GetUserBooksBySlugOrEditionBooks includes the requested fields of the GraphQL type books.
// The GraphQL type's documentation follows.
//
// columns and relationships of "books"
type GetUserBooksBySlugOrEditionBooks struct {
	Book `json:"-"`
	// An array relationship
	Editions []Edition `json:"editions"`
	// An array relationship
	User_books []UserBooks `json:"user_books"`
}

// GetEditions returns GetUserBooksBySlugOrEditionBooks.Editions, and is useful for accessing the field via an interface.
func (v *GetUserBooksBySlugOrEditionBooks) GetEditions() []Edition { return v.Editions }

// GetUser_books returns GetUserBooksBySlugOrEditionBooks.User_books, and is useful for accessing the field via an interface.
func (v *GetUserBooksBySlugOrEditionBooks) GetUser_books() []UserBooks { return v.User_books }

// GetId returns GetUserBooksBySlugOrEditionBooks.Id, and is useful for accessing the field via an interface.
func (v *GetUserBooksBySlugOrEditionBooks) GetId() int { return v.Book.Id }

// GetSlug returns GetUserBooksBySlugOrEditionBooks.Slug, and is useful for accessing the field via an interface.
func (v *GetUserBooksBySlugOrEditionBooks) GetSlug() string { return v.Book.Slug }

// GetTitle returns GetUserBooksBySlugOrEditionBooks.Title, and is useful for accessing the field via an interface.
func (v *GetUserBooksBySlugOrEditionBooks) GetTitle() string { return v.Book.Title }

func (v *GetUserBooksBySlugOrEditionBooks) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetUserBooksBySlugOrEditionBooks
		graphql.NoUnmarshalJSON
	}
	firstPass.GetUserBooksBySlugOrEditionBooks = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.Book)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalGetUserBooksBySlugOrEditionBooks struct {
	Editions []Edition `json:"editions"`

	User_books []UserBooks `json:"user_books"`

	Id int `json:"id"`

	Slug string `json:"slug"`

	Title string `json:"title"`
}

func (v *GetUserBooksBySlugOrEditionBooks) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetUserBooksBySlugOrEditionBooks) __premarshalJSON() (*__premarshalGetUserBooksBySlugOrEditionBooks, error) {
	var retval __premarshalGetUserBooksBySlugOrEditionBooks

	retval.Editions = v.Editions
	retval.User_books = v.User_books
	retval.Id = v.Book.Id
	retval.Slug = v.Book.Slug
	retval.Title = v.Book.Title
	return &retval, nil
}

// GetUserBooksBySlugOrEditionResponse is returned by GetUserBooksBySlugOrEdition on success.
type GetUserBooksBySlugOrEditionResponse struct {
	// An array relationship
	Books []GetUserBooksBySlugOrEditionBooks `json:"books"`
}

// GetBooks returns GetUserBooksBySlugOrEditionResponse.Books, and is useful for accessing the field via an interface.
func (v *GetUserBooksBySlugOrEditionResponse) GetBooks() []GetUserBooksBySlugOrEditionBooks {
	return v.Books
}

// UpdateBookProgressResponse is returned by UpdateBookProgress on success.
type UpdateBookProgressResponse struct {
	// update_user_book_read
	Update_user_book_read UpdateBookProgressUpdate_user_book_readUserBookReadIdType `json:"update_user_book_read"`
}

// GetUpdate_user_book_read returns UpdateBookProgressResponse.Update_user_book_read, and is useful for accessing the field via an interface.
func (v *UpdateBookProgressResponse) GetUpdate_user_book_read() UpdateBookProgressUpdate_user_book_readUserBookReadIdType {
	return v.Update_user_book_read
}

// UpdateBookProgressUpdate_user_book_readUserBookReadIdType includes the requested fields of the GraphQL type UserBookReadIdType.
type UpdateBookProgressUpdate_user_book_readUserBookReadIdType struct {
	Id    int    `json:"id"`
	Error string `json:"error"`
}

// GetId returns UpdateBookProgressUpdate_user_book_readUserBookReadIdType.Id, and is useful for accessing the field via an interface.
func (v *UpdateBookProgressUpdate_user_book_readUserBookReadIdType) GetId() int { return v.Id }

// GetError returns UpdateBookProgressUpdate_user_book_readUserBookReadIdType.Error, and is useful for accessing the field via an interface.
func (v *UpdateBookProgressUpdate_user_book_readUserBookReadIdType) GetError() string { return v.Error }

// UserBookReads includes the GraphQL fields of user_book_reads requested by the fragment UserBookReads.
// The GraphQL type's documentation follows.
//
// columns and relationships of "user_book_reads"
type UserBookReads struct {
	Id             int       `json:"id"`
	Progress       float32   `json:"progress"`
	Progress_pages int       `json:"progress_pages"`
	Started_at     time.Time `json:"-"`
	Finished_at    time.Time `json:"-"`
	// An object relationship
	Edition Edition `json:"edition"`
}

// GetId returns UserBookReads.Id, and is useful for accessing the field via an interface.
func (v *UserBookReads) GetId() int { return v.Id }

// GetProgress returns UserBookReads.Progress, and is useful for accessing the field via an interface.
func (v *UserBookReads) GetProgress() float32 { return v.Progress }

// GetProgress_pages returns UserBookReads.Progress_pages, and is useful for accessing the field via an interface.
func (v *UserBookReads) GetProgress_pages() int { return v.Progress_pages }

// GetStarted_at returns UserBookReads.Started_at, and is useful for accessing the field via an interface.
func (v *UserBookReads) GetStarted_at() time.Time { return v.Started_at }

// GetFinished_at returns UserBookReads.Finished_at, and is useful for accessing the field via an interface.
func (v *UserBookReads) GetFinished_at() time.Time { return v.Finished_at }

// GetEdition returns UserBookReads.Edition, and is useful for accessing the field via an interface.
func (v *UserBookReads) GetEdition() Edition { return v.Edition }

func (v *UserBookReads) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UserBookReads
		Started_at  json.RawMessage `json:"started_at"`
		Finished_at json.RawMessage `json:"finished_at"`
		graphql.NoUnmarshalJSON
	}
	firstPass.UserBookReads = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Started_at
		src := firstPass.Started_at
		if len(src) != 0 && string(src) != "null" {
			err = UnmarshalHardcoverDate(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal UserBookReads.Started_at: %w", err)
			}
		}
	}

	{
		dst := &v.Finished_at
		src := firstPass.Finished_at
		if len(src) != 0 && string(src) != "null" {
			err = UnmarshalHardcoverDate(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal UserBookReads.Finished_at: %w", err)
			}
		}
	}
	return nil
}

type __premarshalUserBookReads struct {
	Id int `json:"id"`

	Progress float32 `json:"progress"`

	Progress_pages int `json:"progress_pages"`

	Started_at json.RawMessage `json:"started_at"`

	Finished_at json.RawMessage `json:"finished_at"`

	Edition Edition `json:"edition"`
}

func (v *UserBookReads) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UserBookReads) __premarshalJSON() (*__premarshalUserBookReads, error) {
	var retval __premarshalUserBookReads

	retval.Id = v.Id
	retval.Progress = v.Progress
	retval.Progress_pages = v.Progress_pages
	{

		dst := &retval.Started_at
		src := v.Started_at
		var err error
		*dst, err = MarshalHardcoverDate(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal UserBookReads.Started_at: %w", err)
		}
	}
	{

		dst := &retval.Finished_at
		src := v.Finished_at
		var err error
		*dst, err = MarshalHardcoverDate(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal UserBookReads.Finished_at: %w", err)
		}
	}
	retval.Edition = v.Edition
	return &retval, nil
}

// UserBooks includes the requested fields of the GraphQL type user_books.
// The GraphQL type's documentation follows.
//
// columns and relationships of "user_books"
type UserBooks struct {
	Id        int `json:"id"`
	Status_id int `json:"status_id"`
	// An object relationship
	Book Book `json:"book"`
	// An object relationship
	Edition Edition `json:"edition"`
	// An array relationship
	User_book_reads []UserBookReads `json:"user_book_reads"`
}

// GetId returns UserBooks.Id, and is useful for accessing the field via an interface.
func (v *UserBooks) GetId() int { return v.Id }

// GetStatus_id returns UserBooks.Status_id, and is useful for accessing the field via an interface.
func (v *UserBooks) GetStatus_id() int { return v.Status_id }

// GetBook returns UserBooks.Book, and is useful for accessing the field via an interface.
func (v *UserBooks) GetBook() Book { return v.Book }

// GetEdition returns UserBooks.Edition, and is useful for accessing the field via an interface.
func (v *UserBooks) GetEdition() Edition { return v.Edition }

// GetUser_book_reads returns UserBooks.User_book_reads, and is useful for accessing the field via an interface.
func (v *UserBooks) GetUser_book_reads() []UserBookReads { return v.User_book_reads }

// __ChangeBookStatusInput is used internally by genqlient
type __ChangeBookStatusInput struct {
	UserBookId int `json:"userBookId"`
	Status     int `json:"status"`
}

// GetUserBookId returns __ChangeBookStatusInput.UserBookId, and is useful for accessing the field via an interface.
func (v *__ChangeBookStatusInput) GetUserBookId() int { return v.UserBookId }

// GetStatus returns __ChangeBookStatusInput.Status, and is useful for accessing the field via an interface.
func (v *__ChangeBookStatusInput) GetStatus() int { return v.Status }

// __CreateUserBookInput is used internally by genqlient
type __CreateUserBookInput struct {
	BookId    int `json:"bookId"`
	Status    int `json:"status"`
	EditionId int `json:"editionId"`
}

// GetBookId returns __CreateUserBookInput.BookId, and is useful for accessing the field via an interface.
func (v *__CreateUserBookInput) GetBookId() int { return v.BookId }

// GetStatus returns __CreateUserBookInput.Status, and is useful for accessing the field via an interface.
func (v *__CreateUserBookInput) GetStatus() int { return v.Status }

// GetEditionId returns __CreateUserBookInput.EditionId, and is useful for accessing the field via an interface.
func (v *__CreateUserBookInput) GetEditionId() int { return v.EditionId }

// __FinishBookProgressInput is used internally by genqlient
type __FinishBookProgressInput struct {
	Id         int       `json:"id"`
	Pages      int       `json:"pages"`
	EditionId  int       `json:"editionId"`
	StartedAt  time.Time `json:"-"`
	FinishedAt time.Time `json:"-"`
}

// GetId returns __FinishBookProgressInput.Id, and is useful for accessing the field via an interface.
func (v *__FinishBookProgressInput) GetId() int { return v.Id }

// GetPages returns __FinishBookProgressInput.Pages, and is useful for accessing the field via an interface.
func (v *__FinishBookProgressInput) GetPages() int { return v.Pages }

// GetEditionId returns __FinishBookProgressInput.EditionId, and is useful for accessing the field via an interface.
func (v *__FinishBookProgressInput) GetEditionId() int { return v.EditionId }

// GetStartedAt returns __FinishBookProgressInput.StartedAt, and is useful for accessing the field via an interface.
func (v *__FinishBookProgressInput) GetStartedAt() time.Time { return v.StartedAt }

// GetFinishedAt returns __FinishBookProgressInput.FinishedAt, and is useful for accessing the field via an interface.
func (v *__FinishBookProgressInput) GetFinishedAt() time.Time { return v.FinishedAt }

func (v *__FinishBookProgressInput) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*__FinishBookProgressInput
		StartedAt  json.RawMessage `json:"startedAt"`
		FinishedAt json.RawMessage `json:"finishedAt"`
		graphql.NoUnmarshalJSON
	}
	firstPass.__FinishBookProgressInput = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.StartedAt
		src := firstPass.StartedAt
		if len(src) != 0 && string(src) != "null" {
			err = UnmarshalHardcoverDate(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal __FinishBookProgressInput.StartedAt: %w", err)
			}
		}
	}

	{
		dst := &v.FinishedAt
		src := firstPass.FinishedAt
		if len(src) != 0 && string(src) != "null" {
			err = UnmarshalHardcoverDate(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal __FinishBookProgressInput.FinishedAt: %w", err)
			}
		}
	}
	return nil
}

type __premarshal__FinishBookProgressInput struct {
	Id int `json:"id"`

	Pages int `json:"pages"`

	EditionId int `json:"editionId"`

	StartedAt json.RawMessage `json:"startedAt"`

	FinishedAt json.RawMessage `json:"finishedAt"`
}

func (v *__FinishBookProgressInput) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *__FinishBookProgressInput) __premarshalJSON() (*__premarshal__FinishBookProgressInput, error) {
	var retval __premarshal__FinishBookProgressInput

	retval.Id = v.Id
	retval.Pages = v.Pages
	retval.EditionId = v.EditionId
	{

		dst := &retval.StartedAt
		src := v.StartedAt
		var err error
		*dst, err = MarshalHardcoverDate(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal __FinishBookProgressInput.StartedAt: %w", err)
		}
	}
	{

		dst := &retval.FinishedAt
		src := v.FinishedAt
		var err error
		*dst, err = MarshalHardcoverDate(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal __FinishBookProgressInput.FinishedAt: %w", err)
		}
	}
	return &retval, nil
}

// __GetUserBooksBySlugOrEditionInput is used internally by genqlient
type __GetUserBooksBySlugOrEditionInput struct {
	Slugs      []string `json:"slugs"`
	EditionIds []int    `json:"editionIds"`
	UserId     int      `json:"userId"`
}

// GetSlugs returns __GetUserBooksBySlugOrEditionInput.Slugs, and is useful for accessing the field via an interface.
func (v *__GetUserBooksBySlugOrEditionInput) GetSlugs() []string { return v.Slugs }

// GetEditionIds returns __GetUserBooksBySlugOrEditionInput.EditionIds, and is useful for accessing the field via an interface.
func (v *__GetUserBooksBySlugOrEditionInput) GetEditionIds() []int { return v.EditionIds }

// GetUserId returns __GetUserBooksBySlugOrEditionInput.UserId, and is useful for accessing the field via an interface.
func (v *__GetUserBooksBySlugOrEditionInput) GetUserId() int { return v.UserId }

// __UpdateBookProgressInput is used internally by genqlient
type __UpdateBookProgressInput struct {
	Id        int       `json:"id"`
	Pages     int       `json:"pages"`
	EditionId int       `json:"editionId"`
	StartedAt time.Time `json:"-"`
}

// GetId returns __UpdateBookProgressInput.Id, and is useful for accessing the field via an interface.
func (v *__UpdateBookProgressInput) GetId() int { return v.Id }

// GetPages returns __UpdateBookProgressInput.Pages, and is useful for accessing the field via an interface.
func (v *__UpdateBookProgressInput) GetPages() int { return v.Pages }

// GetEditionId returns __UpdateBookProgressInput.EditionId, and is useful for accessing the field via an interface.
func (v *__UpdateBookProgressInput) GetEditionId() int { return v.EditionId }

// GetStartedAt returns __UpdateBookProgressInput.StartedAt, and is useful for accessing the field via an interface.
func (v *__UpdateBookProgressInput) GetStartedAt() time.Time { return v.StartedAt }

func (v *__UpdateBookProgressInput) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*__UpdateBookProgressInput
		StartedAt json.RawMessage `json:"startedAt"`
		graphql.NoUnmarshalJSON
	}
	firstPass.__UpdateBookProgressInput = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.StartedAt
		src := firstPass.StartedAt
		if len(src) != 0 && string(src) != "null" {
			err = UnmarshalHardcoverDate(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal __UpdateBookProgressInput.StartedAt: %w", err)
			}
		}
	}
	return nil
}

type __premarshal__UpdateBookProgressInput struct {
	Id int `json:"id"`

	Pages int `json:"pages"`

	EditionId int `json:"editionId"`

	StartedAt json.RawMessage `json:"startedAt"`
}

func (v *__UpdateBookProgressInput) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *__UpdateBookProgressInput) __premarshalJSON() (*__premarshal__UpdateBookProgressInput, error) {
	var retval __premarshal__UpdateBookProgressInput

	retval.Id = v.Id
	retval.Pages = v.Pages
	retval.EditionId = v.EditionId
	{

		dst := &retval.StartedAt
		src := v.StartedAt
		var err error
		*dst, err = MarshalHardcoverDate(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal __UpdateBookProgressInput.StartedAt: %w", err)
		}
	}
	return &retval, nil
}

// The mutation executed by ChangeBookStatus.
const ChangeBookStatus_Operation = `
mutation ChangeBookStatus ($userBookId: Int!, $status: Int) {
	update_user_book(id: $userBookId, object: {status_id:$status}) {
		id
		error
	}
}
`

func ChangeBookStatus(
	ctx_ context.Context,
	userBookId int,
	status int,
) (data_ *ChangeBookStatusResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "ChangeBookStatus",
		Query:  ChangeBookStatus_Operation,
		Variables: &__ChangeBookStatusInput{
			UserBookId: userBookId,
			Status:     status,
		},
	}
	var client_ graphql.Client

	client_, err_ = GetClient(ctx_)
	if err_ != nil {
		return nil, err_
	}

	data_ = &ChangeBookStatusResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The mutation executed by CreateUserBook.
const CreateUserBook_Operation = `
mutation CreateUserBook ($bookId: Int!, $status: Int, $editionId: Int) {
	insert_user_book(object: {book_id:$bookId,status_id:$status,edition_id:$editionId}) {
		id
		error
		user_book {
			user_book_reads {
				... UserBookReads
			}
		}
	}
}
fragment UserBookReads on user_book_reads {
	id
	progress
	progress_pages
	started_at
	finished_at
	edition {
		... Edition
	}
}
fragment Edition on editions {
	id
	pages
}
`

func CreateUserBook(
	ctx_ context.Context,
	bookId int,
	status int,
	editionId int,
) (data_ *CreateUserBookResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "CreateUserBook",
		Query:  CreateUserBook_Operation,
		Variables: &__CreateUserBookInput{
			BookId:    bookId,
			Status:    status,
			EditionId: editionId,
		},
	}
	var client_ graphql.Client

	client_, err_ = GetClient(ctx_)
	if err_ != nil {
		return nil, err_
	}

	data_ = &CreateUserBookResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The mutation executed by FinishBookProgress.
const FinishBookProgress_Operation = `
mutation FinishBookProgress ($id: Int!, $pages: Int, $editionId: Int, $startedAt: date, $finishedAt: date) {
	update_user_book_read(id: $id, object: {progress_pages:$pages,edition_id:$editionId,started_at:$startedAt,finished_at:$finishedAt}) {
		id
		error
	}
}
`

func FinishBookProgress(
	ctx_ context.Context,
	id int,
	pages int,
	editionId int,
	startedAt time.Time,
	finishedAt time.Time,
) (data_ *FinishBookProgressResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "FinishBookProgress",
		Query:  FinishBookProgress_Operation,
		Variables: &__FinishBookProgressInput{
			Id:         id,
			Pages:      pages,
			EditionId:  editionId,
			StartedAt:  startedAt,
			FinishedAt: finishedAt,
		},
	}
	var client_ graphql.Client

	client_, err_ = GetClient(ctx_)
	if err_ != nil {
		return nil, err_
	}

	data_ = &FinishBookProgressResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by GetCurrentUser.
const GetCurrentUser_Operation = `
query GetCurrentUser {
	me {
		id
	}
}
`

func GetCurrentUser(
	ctx_ context.Context,
) (data_ *GetCurrentUserResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "GetCurrentUser",
		Query:  GetCurrentUser_Operation,
	}
	var client_ graphql.Client

	client_, err_ = GetClient(ctx_)
	if err_ != nil {
		return nil, err_
	}

	data_ = &GetCurrentUserResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by GetUserBooksBySlugOrEdition.
const GetUserBooksBySlugOrEdition_Operation = `
query GetUserBooksBySlugOrEdition ($slugs: [String!], $editionIds: [Int!], $userId: Int) {
	books(where: {slug:{_in:$slugs}}) {
		... Book
		editions(where: {id:{_in:$editionIds}}) {
			... Edition
		}
		user_books(where: {user_id:{_eq:$userId}}) {
			id
			status_id
			book {
				... Book
			}
			edition {
				... Edition
			}
			user_book_reads(where: {edition:{_or:[{id:{_in:$editionIds}},{reading_format_id:{_neq:2}}]}}, order_by: {started_at:desc}, limit: 1) {
				... UserBookReads
			}
		}
	}
}
fragment Book on books {
	id
	slug
	title
}
fragment Edition on editions {
	id
	pages
}
fragment UserBookReads on user_book_reads {
	id
	progress
	progress_pages
	started_at
	finished_at
	edition {
		... Edition
	}
}
`

func GetUserBooksBySlugOrEdition(
	ctx_ context.Context,
	slugs []string,
	editionIds []int,
	userId int,
) (data_ *GetUserBooksBySlugOrEditionResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "GetUserBooksBySlugOrEdition",
		Query:  GetUserBooksBySlugOrEdition_Operation,
		Variables: &__GetUserBooksBySlugOrEditionInput{
			Slugs:      slugs,
			EditionIds: editionIds,
			UserId:     userId,
		},
	}
	var client_ graphql.Client

	client_, err_ = GetClient(ctx_)
	if err_ != nil {
		return nil, err_
	}

	data_ = &GetUserBooksBySlugOrEditionResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The mutation executed by UpdateBookProgress.
const UpdateBookProgress_Operation = `
mutation UpdateBookProgress ($id: Int!, $pages: Int, $editionId: Int, $startedAt: date) {
	update_user_book_read(id: $id, object: {progress_pages:$pages,edition_id:$editionId,started_at:$startedAt}) {
		id
		error
	}
}
`

func UpdateBookProgress(
	ctx_ context.Context,
	id int,
	pages int,
	editionId int,
	startedAt time.Time,
) (data_ *UpdateBookProgressResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "UpdateBookProgress",
		Query:  UpdateBookProgress_Operation,
		Variables: &__UpdateBookProgressInput{
			Id:        id,
			Pages:     pages,
			EditionId: editionId,
			StartedAt: startedAt,
		},
	}
	var client_ graphql.Client

	client_, err_ = GetClient(ctx_)
	if err_ != nil {
		return nil, err_
	}

	data_ = &UpdateBookProgressResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}
