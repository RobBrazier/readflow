// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package hardcover

import (
	"context"
	"time"

	"github.com/Khan/genqlient/graphql"
)

// GetBookReviewsMeUsers includes the requested fields of the GraphQL type users.
// The GraphQL type's documentation follows.
//
// columns and relationships of "users
type GetBookReviewsMeUsers struct {
	// An array relationship
	User_books []GetBookReviewsMeUsersUser_books `json:"user_books"`
}

// GetUser_books returns GetBookReviewsMeUsers.User_books, and is useful for accessing the field via an interface.
func (v *GetBookReviewsMeUsers) GetUser_books() []GetBookReviewsMeUsersUser_books {
	return v.User_books
}

// GetBookReviewsMeUsersUser_books includes the requested fields of the GraphQL type user_books.
// The GraphQL type's documentation follows.
//
// columns and relationships of "user_books
type GetBookReviewsMeUsersUser_books struct {
	Reviewed_at time.Time `json:"reviewed_at"`
	Date_added  time.Time `json:"date_added"`
	Review_raw  string    `json:"review_raw"`
	Rating      int       `json:"rating"`
	// An object relationship
	Book GetBookReviewsMeUsersUser_booksBookBooks `json:"book"`
}

// GetReviewed_at returns GetBookReviewsMeUsersUser_books.Reviewed_at, and is useful for accessing the field via an interface.
func (v *GetBookReviewsMeUsersUser_books) GetReviewed_at() time.Time { return v.Reviewed_at }

// GetDate_added returns GetBookReviewsMeUsersUser_books.Date_added, and is useful for accessing the field via an interface.
func (v *GetBookReviewsMeUsersUser_books) GetDate_added() time.Time { return v.Date_added }

// GetReview_raw returns GetBookReviewsMeUsersUser_books.Review_raw, and is useful for accessing the field via an interface.
func (v *GetBookReviewsMeUsersUser_books) GetReview_raw() string { return v.Review_raw }

// GetRating returns GetBookReviewsMeUsersUser_books.Rating, and is useful for accessing the field via an interface.
func (v *GetBookReviewsMeUsersUser_books) GetRating() int { return v.Rating }

// GetBook returns GetBookReviewsMeUsersUser_books.Book, and is useful for accessing the field via an interface.
func (v *GetBookReviewsMeUsersUser_books) GetBook() GetBookReviewsMeUsersUser_booksBookBooks {
	return v.Book
}

// GetBookReviewsMeUsersUser_booksBookBooks includes the requested fields of the GraphQL type books.
// The GraphQL type's documentation follows.
//
// columns and relationships of "books
type GetBookReviewsMeUsersUser_booksBookBooks struct {
	Title string `json:"title"`
}

// GetTitle returns GetBookReviewsMeUsersUser_booksBookBooks.Title, and is useful for accessing the field via an interface.
func (v *GetBookReviewsMeUsersUser_booksBookBooks) GetTitle() string { return v.Title }

// GetBookReviewsResponse is returned by GetBookReviews on success.
type GetBookReviewsResponse struct {
	// execute function "me" which returns "users
	Me []GetBookReviewsMeUsers `json:"me"`
}

// GetMe returns GetBookReviewsResponse.Me, and is useful for accessing the field via an interface.
func (v *GetBookReviewsResponse) GetMe() []GetBookReviewsMeUsers { return v.Me }

// GetCurrentUserMeUsers includes the requested fields of the GraphQL type users.
// The GraphQL type's documentation follows.
//
// columns and relationships of "users
type GetCurrentUserMeUsers struct {
	Name     string `json:"name"`
	Username string `json:"username"`
}

// GetName returns GetCurrentUserMeUsers.Name, and is useful for accessing the field via an interface.
func (v *GetCurrentUserMeUsers) GetName() string { return v.Name }

// GetUsername returns GetCurrentUserMeUsers.Username, and is useful for accessing the field via an interface.
func (v *GetCurrentUserMeUsers) GetUsername() string { return v.Username }

// GetCurrentUserResponse is returned by GetCurrentUser on success.
type GetCurrentUserResponse struct {
	// execute function "me" which returns "users
	Me []GetCurrentUserMeUsers `json:"me"`
}

// GetMe returns GetCurrentUserResponse.Me, and is useful for accessing the field via an interface.
func (v *GetCurrentUserResponse) GetMe() []GetCurrentUserMeUsers { return v.Me }

// The query or mutation executed by GetBookReviews.
const GetBookReviews_Operation = `
query GetBookReviews {
	me {
		user_books(where: {_and:[{has_review:{_eq:true}},{status_id:{_eq:3}}]}, order_by: [{date_added:desc},{reviewed_at:desc}]) {
			reviewed_at
			date_added
			review_raw
			rating
			book {
				title
			}
		}
	}
}
`

func GetBookReviews(
	ctx_ context.Context,
	client_ graphql.Client,
) (*GetBookReviewsResponse, error) {
	req_ := &graphql.Request{
		OpName: "GetBookReviews",
		Query:  GetBookReviews_Operation,
	}
	var err_ error

	var data_ GetBookReviewsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by GetCurrentUser.
const GetCurrentUser_Operation = `
query GetCurrentUser {
	me {
		name
		username
	}
}
`

func GetCurrentUser(
	ctx_ context.Context,
	client_ graphql.Client,
) (*GetCurrentUserResponse, error) {
	req_ := &graphql.Request{
		OpName: "GetCurrentUser",
		Query:  GetCurrentUser_Operation,
	}
	var err_ error

	var data_ GetCurrentUserResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}
