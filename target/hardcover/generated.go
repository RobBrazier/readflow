// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package hardcover

import (
	"context"
	"encoding/json"
	"fmt"
	"time"

	"github.com/Khan/genqlient/graphql"
	"github.com/RobBrazier/readflow/schemas/hardcover"
)

// FinishBookProgressResponse is returned by FinishBookProgress on success.
type FinishBookProgressResponse struct {
	// update_user_book_read
	Update_user_book_read FinishBookProgressUpdate_user_book_readUserBookReadIdType `json:"update_user_book_read"`
}

// GetUpdate_user_book_read returns FinishBookProgressResponse.Update_user_book_read, and is useful for accessing the field via an interface.
func (v *FinishBookProgressResponse) GetUpdate_user_book_read() FinishBookProgressUpdate_user_book_readUserBookReadIdType {
	return v.Update_user_book_read
}

// FinishBookProgressUpdate_user_book_readUserBookReadIdType includes the requested fields of the GraphQL type UserBookReadIdType.
type FinishBookProgressUpdate_user_book_readUserBookReadIdType struct {
	Id int `json:"id"`
}

// GetId returns FinishBookProgressUpdate_user_book_readUserBookReadIdType.Id, and is useful for accessing the field via an interface.
func (v *FinishBookProgressUpdate_user_book_readUserBookReadIdType) GetId() int { return v.Id }

// GetCurrentUserMeUsers includes the requested fields of the GraphQL type users.
// The GraphQL type's documentation follows.
//
// columns and relationships of "users"
type GetCurrentUserMeUsers struct {
	Name     string `json:"name"`
	Username string `json:"username"`
}

// GetName returns GetCurrentUserMeUsers.Name, and is useful for accessing the field via an interface.
func (v *GetCurrentUserMeUsers) GetName() string { return v.Name }

// GetUsername returns GetCurrentUserMeUsers.Username, and is useful for accessing the field via an interface.
func (v *GetCurrentUserMeUsers) GetUsername() string { return v.Username }

// GetCurrentUserResponse is returned by GetCurrentUser on success.
type GetCurrentUserResponse struct {
	// execute function "me" which returns "users"
	Me []GetCurrentUserMeUsers `json:"me"`
}

// GetMe returns GetCurrentUserResponse.Me, and is useful for accessing the field via an interface.
func (v *GetCurrentUserResponse) GetMe() []GetCurrentUserMeUsers { return v.Me }

// GetUserBooksBySlugMeUsers includes the requested fields of the GraphQL type users.
// The GraphQL type's documentation follows.
//
// columns and relationships of "users"
type GetUserBooksBySlugMeUsers struct {
	// An array relationship
	User_books []GetUserBooksBySlugMeUsersUser_books `json:"user_books"`
}

// GetUser_books returns GetUserBooksBySlugMeUsers.User_books, and is useful for accessing the field via an interface.
func (v *GetUserBooksBySlugMeUsers) GetUser_books() []GetUserBooksBySlugMeUsersUser_books {
	return v.User_books
}

// GetUserBooksBySlugMeUsersUser_books includes the requested fields of the GraphQL type user_books.
// The GraphQL type's documentation follows.
//
// columns and relationships of "user_books"
type GetUserBooksBySlugMeUsersUser_books struct {
	Status_id int `json:"status_id"`
	Book_id   int `json:"book_id"`
	// An object relationship
	Book GetUserBooksBySlugMeUsersUser_booksBookBooks `json:"book"`
	// An object relationship
	Edition GetUserBooksBySlugMeUsersUser_booksEditionEditions `json:"edition"`
	// An array relationship
	User_book_reads []GetUserBooksBySlugMeUsersUser_booksUser_book_reads `json:"user_book_reads"`
}

// GetStatus_id returns GetUserBooksBySlugMeUsersUser_books.Status_id, and is useful for accessing the field via an interface.
func (v *GetUserBooksBySlugMeUsersUser_books) GetStatus_id() int { return v.Status_id }

// GetBook_id returns GetUserBooksBySlugMeUsersUser_books.Book_id, and is useful for accessing the field via an interface.
func (v *GetUserBooksBySlugMeUsersUser_books) GetBook_id() int { return v.Book_id }

// GetBook returns GetUserBooksBySlugMeUsersUser_books.Book, and is useful for accessing the field via an interface.
func (v *GetUserBooksBySlugMeUsersUser_books) GetBook() GetUserBooksBySlugMeUsersUser_booksBookBooks {
	return v.Book
}

// GetEdition returns GetUserBooksBySlugMeUsersUser_books.Edition, and is useful for accessing the field via an interface.
func (v *GetUserBooksBySlugMeUsersUser_books) GetEdition() GetUserBooksBySlugMeUsersUser_booksEditionEditions {
	return v.Edition
}

// GetUser_book_reads returns GetUserBooksBySlugMeUsersUser_books.User_book_reads, and is useful for accessing the field via an interface.
func (v *GetUserBooksBySlugMeUsersUser_books) GetUser_book_reads() []GetUserBooksBySlugMeUsersUser_booksUser_book_reads {
	return v.User_book_reads
}

// GetUserBooksBySlugMeUsersUser_booksBookBooks includes the requested fields of the GraphQL type books.
// The GraphQL type's documentation follows.
//
// columns and relationships of "books"
type GetUserBooksBySlugMeUsersUser_booksBookBooks struct {
	Slug  string `json:"slug"`
	Title string `json:"title"`
}

// GetSlug returns GetUserBooksBySlugMeUsersUser_booksBookBooks.Slug, and is useful for accessing the field via an interface.
func (v *GetUserBooksBySlugMeUsersUser_booksBookBooks) GetSlug() string { return v.Slug }

// GetTitle returns GetUserBooksBySlugMeUsersUser_booksBookBooks.Title, and is useful for accessing the field via an interface.
func (v *GetUserBooksBySlugMeUsersUser_booksBookBooks) GetTitle() string { return v.Title }

// GetUserBooksBySlugMeUsersUser_booksEditionEditions includes the requested fields of the GraphQL type editions.
// The GraphQL type's documentation follows.
//
// columns and relationships of "editions"
type GetUserBooksBySlugMeUsersUser_booksEditionEditions struct {
	Id    int `json:"id"`
	Pages int `json:"pages"`
}

// GetId returns GetUserBooksBySlugMeUsersUser_booksEditionEditions.Id, and is useful for accessing the field via an interface.
func (v *GetUserBooksBySlugMeUsersUser_booksEditionEditions) GetId() int { return v.Id }

// GetPages returns GetUserBooksBySlugMeUsersUser_booksEditionEditions.Pages, and is useful for accessing the field via an interface.
func (v *GetUserBooksBySlugMeUsersUser_booksEditionEditions) GetPages() int { return v.Pages }

// GetUserBooksBySlugMeUsersUser_booksUser_book_reads includes the requested fields of the GraphQL type user_book_reads.
// The GraphQL type's documentation follows.
//
// columns and relationships of "user_book_reads"
type GetUserBooksBySlugMeUsersUser_booksUser_book_reads struct {
	Id             int       `json:"id"`
	Progress       float32   `json:"progress"`
	Progress_pages int       `json:"progress_pages"`
	Started_at     time.Time `json:"-"`
	Finished_at    time.Time `json:"-"`
	// An object relationship
	Edition GetUserBooksBySlugMeUsersUser_booksUser_book_readsEditionEditions `json:"edition"`
}

// GetId returns GetUserBooksBySlugMeUsersUser_booksUser_book_reads.Id, and is useful for accessing the field via an interface.
func (v *GetUserBooksBySlugMeUsersUser_booksUser_book_reads) GetId() int { return v.Id }

// GetProgress returns GetUserBooksBySlugMeUsersUser_booksUser_book_reads.Progress, and is useful for accessing the field via an interface.
func (v *GetUserBooksBySlugMeUsersUser_booksUser_book_reads) GetProgress() float32 { return v.Progress }

// GetProgress_pages returns GetUserBooksBySlugMeUsersUser_booksUser_book_reads.Progress_pages, and is useful for accessing the field via an interface.
func (v *GetUserBooksBySlugMeUsersUser_booksUser_book_reads) GetProgress_pages() int {
	return v.Progress_pages
}

// GetStarted_at returns GetUserBooksBySlugMeUsersUser_booksUser_book_reads.Started_at, and is useful for accessing the field via an interface.
func (v *GetUserBooksBySlugMeUsersUser_booksUser_book_reads) GetStarted_at() time.Time {
	return v.Started_at
}

// GetFinished_at returns GetUserBooksBySlugMeUsersUser_booksUser_book_reads.Finished_at, and is useful for accessing the field via an interface.
func (v *GetUserBooksBySlugMeUsersUser_booksUser_book_reads) GetFinished_at() time.Time {
	return v.Finished_at
}

// GetEdition returns GetUserBooksBySlugMeUsersUser_booksUser_book_reads.Edition, and is useful for accessing the field via an interface.
func (v *GetUserBooksBySlugMeUsersUser_booksUser_book_reads) GetEdition() GetUserBooksBySlugMeUsersUser_booksUser_book_readsEditionEditions {
	return v.Edition
}

func (v *GetUserBooksBySlugMeUsersUser_booksUser_book_reads) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetUserBooksBySlugMeUsersUser_booksUser_book_reads
		Started_at  json.RawMessage `json:"started_at"`
		Finished_at json.RawMessage `json:"finished_at"`
		graphql.NoUnmarshalJSON
	}
	firstPass.GetUserBooksBySlugMeUsersUser_booksUser_book_reads = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Started_at
		src := firstPass.Started_at
		if len(src) != 0 && string(src) != "null" {
			err = hardcover.UnmarshalHardcoverDate(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal GetUserBooksBySlugMeUsersUser_booksUser_book_reads.Started_at: %w", err)
			}
		}
	}

	{
		dst := &v.Finished_at
		src := firstPass.Finished_at
		if len(src) != 0 && string(src) != "null" {
			err = hardcover.UnmarshalHardcoverDate(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal GetUserBooksBySlugMeUsersUser_booksUser_book_reads.Finished_at: %w", err)
			}
		}
	}
	return nil
}

type __premarshalGetUserBooksBySlugMeUsersUser_booksUser_book_reads struct {
	Id int `json:"id"`

	Progress float32 `json:"progress"`

	Progress_pages int `json:"progress_pages"`

	Started_at json.RawMessage `json:"started_at"`

	Finished_at json.RawMessage `json:"finished_at"`

	Edition GetUserBooksBySlugMeUsersUser_booksUser_book_readsEditionEditions `json:"edition"`
}

func (v *GetUserBooksBySlugMeUsersUser_booksUser_book_reads) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetUserBooksBySlugMeUsersUser_booksUser_book_reads) __premarshalJSON() (*__premarshalGetUserBooksBySlugMeUsersUser_booksUser_book_reads, error) {
	var retval __premarshalGetUserBooksBySlugMeUsersUser_booksUser_book_reads

	retval.Id = v.Id
	retval.Progress = v.Progress
	retval.Progress_pages = v.Progress_pages
	{

		dst := &retval.Started_at
		src := v.Started_at
		var err error
		*dst, err = hardcover.MarshalHardcoverDate(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal GetUserBooksBySlugMeUsersUser_booksUser_book_reads.Started_at: %w", err)
		}
	}
	{

		dst := &retval.Finished_at
		src := v.Finished_at
		var err error
		*dst, err = hardcover.MarshalHardcoverDate(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal GetUserBooksBySlugMeUsersUser_booksUser_book_reads.Finished_at: %w", err)
		}
	}
	retval.Edition = v.Edition
	return &retval, nil
}

// GetUserBooksBySlugMeUsersUser_booksUser_book_readsEditionEditions includes the requested fields of the GraphQL type editions.
// The GraphQL type's documentation follows.
//
// columns and relationships of "editions"
type GetUserBooksBySlugMeUsersUser_booksUser_book_readsEditionEditions struct {
	Id    int `json:"id"`
	Pages int `json:"pages"`
}

// GetId returns GetUserBooksBySlugMeUsersUser_booksUser_book_readsEditionEditions.Id, and is useful for accessing the field via an interface.
func (v *GetUserBooksBySlugMeUsersUser_booksUser_book_readsEditionEditions) GetId() int { return v.Id }

// GetPages returns GetUserBooksBySlugMeUsersUser_booksUser_book_readsEditionEditions.Pages, and is useful for accessing the field via an interface.
func (v *GetUserBooksBySlugMeUsersUser_booksUser_book_readsEditionEditions) GetPages() int {
	return v.Pages
}

// GetUserBooksBySlugResponse is returned by GetUserBooksBySlug on success.
type GetUserBooksBySlugResponse struct {
	// execute function "me" which returns "users"
	Me []GetUserBooksBySlugMeUsers `json:"me"`
}

// GetMe returns GetUserBooksBySlugResponse.Me, and is useful for accessing the field via an interface.
func (v *GetUserBooksBySlugResponse) GetMe() []GetUserBooksBySlugMeUsers { return v.Me }

// StartBookProgressInsert_user_book_readUserBookReadIdType includes the requested fields of the GraphQL type UserBookReadIdType.
type StartBookProgressInsert_user_book_readUserBookReadIdType struct {
	Id int `json:"id"`
}

// GetId returns StartBookProgressInsert_user_book_readUserBookReadIdType.Id, and is useful for accessing the field via an interface.
func (v *StartBookProgressInsert_user_book_readUserBookReadIdType) GetId() int { return v.Id }

// StartBookProgressResponse is returned by StartBookProgress on success.
type StartBookProgressResponse struct {
	Insert_user_book_read StartBookProgressInsert_user_book_readUserBookReadIdType `json:"insert_user_book_read"`
}

// GetInsert_user_book_read returns StartBookProgressResponse.Insert_user_book_read, and is useful for accessing the field via an interface.
func (v *StartBookProgressResponse) GetInsert_user_book_read() StartBookProgressInsert_user_book_readUserBookReadIdType {
	return v.Insert_user_book_read
}

// UpdateBookProgressResponse is returned by UpdateBookProgress on success.
type UpdateBookProgressResponse struct {
	// update_user_book_read
	Update_user_book_read UpdateBookProgressUpdate_user_book_readUserBookReadIdType `json:"update_user_book_read"`
}

// GetUpdate_user_book_read returns UpdateBookProgressResponse.Update_user_book_read, and is useful for accessing the field via an interface.
func (v *UpdateBookProgressResponse) GetUpdate_user_book_read() UpdateBookProgressUpdate_user_book_readUserBookReadIdType {
	return v.Update_user_book_read
}

// UpdateBookProgressUpdate_user_book_readUserBookReadIdType includes the requested fields of the GraphQL type UserBookReadIdType.
type UpdateBookProgressUpdate_user_book_readUserBookReadIdType struct {
	Id int `json:"id"`
}

// GetId returns UpdateBookProgressUpdate_user_book_readUserBookReadIdType.Id, and is useful for accessing the field via an interface.
func (v *UpdateBookProgressUpdate_user_book_readUserBookReadIdType) GetId() int { return v.Id }

// __FinishBookProgressInput is used internally by genqlient
type __FinishBookProgressInput struct {
	Id         int       `json:"id"`
	Pages      int       `json:"pages"`
	EditionId  int       `json:"editionId"`
	StartedAt  time.Time `json:"-"`
	FinishedAt time.Time `json:"-"`
}

// GetId returns __FinishBookProgressInput.Id, and is useful for accessing the field via an interface.
func (v *__FinishBookProgressInput) GetId() int { return v.Id }

// GetPages returns __FinishBookProgressInput.Pages, and is useful for accessing the field via an interface.
func (v *__FinishBookProgressInput) GetPages() int { return v.Pages }

// GetEditionId returns __FinishBookProgressInput.EditionId, and is useful for accessing the field via an interface.
func (v *__FinishBookProgressInput) GetEditionId() int { return v.EditionId }

// GetStartedAt returns __FinishBookProgressInput.StartedAt, and is useful for accessing the field via an interface.
func (v *__FinishBookProgressInput) GetStartedAt() time.Time { return v.StartedAt }

// GetFinishedAt returns __FinishBookProgressInput.FinishedAt, and is useful for accessing the field via an interface.
func (v *__FinishBookProgressInput) GetFinishedAt() time.Time { return v.FinishedAt }

func (v *__FinishBookProgressInput) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*__FinishBookProgressInput
		StartedAt  json.RawMessage `json:"startedAt"`
		FinishedAt json.RawMessage `json:"finishedAt"`
		graphql.NoUnmarshalJSON
	}
	firstPass.__FinishBookProgressInput = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.StartedAt
		src := firstPass.StartedAt
		if len(src) != 0 && string(src) != "null" {
			err = hardcover.UnmarshalHardcoverDate(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal __FinishBookProgressInput.StartedAt: %w", err)
			}
		}
	}

	{
		dst := &v.FinishedAt
		src := firstPass.FinishedAt
		if len(src) != 0 && string(src) != "null" {
			err = hardcover.UnmarshalHardcoverDate(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal __FinishBookProgressInput.FinishedAt: %w", err)
			}
		}
	}
	return nil
}

type __premarshal__FinishBookProgressInput struct {
	Id int `json:"id"`

	Pages int `json:"pages"`

	EditionId int `json:"editionId"`

	StartedAt json.RawMessage `json:"startedAt"`

	FinishedAt json.RawMessage `json:"finishedAt"`
}

func (v *__FinishBookProgressInput) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *__FinishBookProgressInput) __premarshalJSON() (*__premarshal__FinishBookProgressInput, error) {
	var retval __premarshal__FinishBookProgressInput

	retval.Id = v.Id
	retval.Pages = v.Pages
	retval.EditionId = v.EditionId
	{

		dst := &retval.StartedAt
		src := v.StartedAt
		var err error
		*dst, err = hardcover.MarshalHardcoverDate(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal __FinishBookProgressInput.StartedAt: %w", err)
		}
	}
	{

		dst := &retval.FinishedAt
		src := v.FinishedAt
		var err error
		*dst, err = hardcover.MarshalHardcoverDate(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal __FinishBookProgressInput.FinishedAt: %w", err)
		}
	}
	return &retval, nil
}

// __GetUserBooksBySlugInput is used internally by genqlient
type __GetUserBooksBySlugInput struct {
	Slug string `json:"slug"`
}

// GetSlug returns __GetUserBooksBySlugInput.Slug, and is useful for accessing the field via an interface.
func (v *__GetUserBooksBySlugInput) GetSlug() string { return v.Slug }

// __StartBookProgressInput is used internally by genqlient
type __StartBookProgressInput struct {
	BookId    int       `json:"bookId"`
	Pages     int       `json:"pages"`
	EditionId int       `json:"editionId"`
	StartedAt time.Time `json:"-"`
}

// GetBookId returns __StartBookProgressInput.BookId, and is useful for accessing the field via an interface.
func (v *__StartBookProgressInput) GetBookId() int { return v.BookId }

// GetPages returns __StartBookProgressInput.Pages, and is useful for accessing the field via an interface.
func (v *__StartBookProgressInput) GetPages() int { return v.Pages }

// GetEditionId returns __StartBookProgressInput.EditionId, and is useful for accessing the field via an interface.
func (v *__StartBookProgressInput) GetEditionId() int { return v.EditionId }

// GetStartedAt returns __StartBookProgressInput.StartedAt, and is useful for accessing the field via an interface.
func (v *__StartBookProgressInput) GetStartedAt() time.Time { return v.StartedAt }

func (v *__StartBookProgressInput) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*__StartBookProgressInput
		StartedAt json.RawMessage `json:"startedAt"`
		graphql.NoUnmarshalJSON
	}
	firstPass.__StartBookProgressInput = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.StartedAt
		src := firstPass.StartedAt
		if len(src) != 0 && string(src) != "null" {
			err = hardcover.UnmarshalHardcoverDate(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal __StartBookProgressInput.StartedAt: %w", err)
			}
		}
	}
	return nil
}

type __premarshal__StartBookProgressInput struct {
	BookId int `json:"bookId"`

	Pages int `json:"pages"`

	EditionId int `json:"editionId"`

	StartedAt json.RawMessage `json:"startedAt"`
}

func (v *__StartBookProgressInput) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *__StartBookProgressInput) __premarshalJSON() (*__premarshal__StartBookProgressInput, error) {
	var retval __premarshal__StartBookProgressInput

	retval.BookId = v.BookId
	retval.Pages = v.Pages
	retval.EditionId = v.EditionId
	{

		dst := &retval.StartedAt
		src := v.StartedAt
		var err error
		*dst, err = hardcover.MarshalHardcoverDate(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal __StartBookProgressInput.StartedAt: %w", err)
		}
	}
	return &retval, nil
}

// __UpdateBookProgressInput is used internally by genqlient
type __UpdateBookProgressInput struct {
	Id        int       `json:"id"`
	Pages     int       `json:"pages"`
	EditionId int       `json:"editionId"`
	StartedAt time.Time `json:"-"`
}

// GetId returns __UpdateBookProgressInput.Id, and is useful for accessing the field via an interface.
func (v *__UpdateBookProgressInput) GetId() int { return v.Id }

// GetPages returns __UpdateBookProgressInput.Pages, and is useful for accessing the field via an interface.
func (v *__UpdateBookProgressInput) GetPages() int { return v.Pages }

// GetEditionId returns __UpdateBookProgressInput.EditionId, and is useful for accessing the field via an interface.
func (v *__UpdateBookProgressInput) GetEditionId() int { return v.EditionId }

// GetStartedAt returns __UpdateBookProgressInput.StartedAt, and is useful for accessing the field via an interface.
func (v *__UpdateBookProgressInput) GetStartedAt() time.Time { return v.StartedAt }

func (v *__UpdateBookProgressInput) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*__UpdateBookProgressInput
		StartedAt json.RawMessage `json:"startedAt"`
		graphql.NoUnmarshalJSON
	}
	firstPass.__UpdateBookProgressInput = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.StartedAt
		src := firstPass.StartedAt
		if len(src) != 0 && string(src) != "null" {
			err = hardcover.UnmarshalHardcoverDate(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal __UpdateBookProgressInput.StartedAt: %w", err)
			}
		}
	}
	return nil
}

type __premarshal__UpdateBookProgressInput struct {
	Id int `json:"id"`

	Pages int `json:"pages"`

	EditionId int `json:"editionId"`

	StartedAt json.RawMessage `json:"startedAt"`
}

func (v *__UpdateBookProgressInput) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *__UpdateBookProgressInput) __premarshalJSON() (*__premarshal__UpdateBookProgressInput, error) {
	var retval __premarshal__UpdateBookProgressInput

	retval.Id = v.Id
	retval.Pages = v.Pages
	retval.EditionId = v.EditionId
	{

		dst := &retval.StartedAt
		src := v.StartedAt
		var err error
		*dst, err = hardcover.MarshalHardcoverDate(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal __UpdateBookProgressInput.StartedAt: %w", err)
		}
	}
	return &retval, nil
}

// The query or mutation executed by FinishBookProgress.
const FinishBookProgress_Operation = `
mutation FinishBookProgress ($id: Int!, $pages: Int, $editionId: Int, $startedAt: date, $finishedAt: date) {
	update_user_book_read(id: $id, object: {progress_pages:$pages,edition_id:$editionId,started_at:$startedAt,finished_at:$finishedAt}) {
		id
	}
}
`

func FinishBookProgress(
	ctx_ context.Context,
	client_ graphql.Client,
	id int,
	pages int,
	editionId int,
	startedAt time.Time,
	finishedAt time.Time,
) (*FinishBookProgressResponse, error) {
	req_ := &graphql.Request{
		OpName: "FinishBookProgress",
		Query:  FinishBookProgress_Operation,
		Variables: &__FinishBookProgressInput{
			Id:         id,
			Pages:      pages,
			EditionId:  editionId,
			StartedAt:  startedAt,
			FinishedAt: finishedAt,
		},
	}
	var err_ error

	var data_ FinishBookProgressResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by GetCurrentUser.
const GetCurrentUser_Operation = `
query GetCurrentUser {
	me {
		name
		username
	}
}
`

func GetCurrentUser(
	ctx_ context.Context,
	client_ graphql.Client,
) (*GetCurrentUserResponse, error) {
	req_ := &graphql.Request{
		OpName: "GetCurrentUser",
		Query:  GetCurrentUser_Operation,
	}
	var err_ error

	var data_ GetCurrentUserResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by GetUserBooksBySlug.
const GetUserBooksBySlug_Operation = `
query GetUserBooksBySlug ($slug: String) {
	me {
		user_books(where: {book:{slug:{_eq:$slug}}}) {
			status_id
			book_id
			book {
				slug
				title
			}
			edition {
				id
				pages
			}
			user_book_reads(order_by: {started_at:desc}, limit: 1) {
				id
				progress
				progress_pages
				started_at
				finished_at
				edition {
					id
					pages
				}
			}
		}
	}
}
`

func GetUserBooksBySlug(
	ctx_ context.Context,
	client_ graphql.Client,
	slug string,
) (*GetUserBooksBySlugResponse, error) {
	req_ := &graphql.Request{
		OpName: "GetUserBooksBySlug",
		Query:  GetUserBooksBySlug_Operation,
		Variables: &__GetUserBooksBySlugInput{
			Slug: slug,
		},
	}
	var err_ error

	var data_ GetUserBooksBySlugResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by StartBookProgress.
const StartBookProgress_Operation = `
mutation StartBookProgress ($bookId: Int!, $pages: Int, $editionId: Int, $startedAt: date) {
	insert_user_book_read(user_book_id: $bookId, user_book_read: {progress_pages:$pages,edition_id:$editionId,started_at:$startedAt}) {
		id
	}
}
`

func StartBookProgress(
	ctx_ context.Context,
	client_ graphql.Client,
	bookId int,
	pages int,
	editionId int,
	startedAt time.Time,
) (*StartBookProgressResponse, error) {
	req_ := &graphql.Request{
		OpName: "StartBookProgress",
		Query:  StartBookProgress_Operation,
		Variables: &__StartBookProgressInput{
			BookId:    bookId,
			Pages:     pages,
			EditionId: editionId,
			StartedAt: startedAt,
		},
	}
	var err_ error

	var data_ StartBookProgressResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by UpdateBookProgress.
const UpdateBookProgress_Operation = `
mutation UpdateBookProgress ($id: Int!, $pages: Int, $editionId: Int, $startedAt: date) {
	update_user_book_read(id: $id, object: {progress_pages:$pages,edition_id:$editionId,started_at:$startedAt}) {
		id
	}
}
`

func UpdateBookProgress(
	ctx_ context.Context,
	client_ graphql.Client,
	id int,
	pages int,
	editionId int,
	startedAt time.Time,
) (*UpdateBookProgressResponse, error) {
	req_ := &graphql.Request{
		OpName: "UpdateBookProgress",
		Query:  UpdateBookProgress_Operation,
		Variables: &__UpdateBookProgressInput{
			Id:        id,
			Pages:     pages,
			EditionId: editionId,
			StartedAt: startedAt,
		},
	}
	var err_ error

	var data_ UpdateBookProgressResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}
