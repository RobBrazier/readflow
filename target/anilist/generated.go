// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package anilist

import (
	"context"
	"encoding/json"

	"github.com/Khan/genqlient/graphql"
)

// GetCurrentUserResponse is returned by GetCurrentUser on success.
type GetCurrentUserResponse struct {
	// Get the currently authenticated user
	Viewer GetCurrentUserViewerUser `json:"Viewer"`
}

// GetViewer returns GetCurrentUserResponse.Viewer, and is useful for accessing the field via an interface.
func (v *GetCurrentUserResponse) GetViewer() GetCurrentUserViewerUser { return v.Viewer }

// GetCurrentUserViewerUser includes the requested fields of the GraphQL type User.
// The GraphQL type's documentation follows.
//
// A user
type GetCurrentUserViewerUser struct {
	// The id of the user
	Id int `json:"id"`
	// The name of the user
	Name string `json:"name"`
}

// GetId returns GetCurrentUserViewerUser.Id, and is useful for accessing the field via an interface.
func (v *GetCurrentUserViewerUser) GetId() int { return v.Id }

// GetName returns GetCurrentUserViewerUser.Name, and is useful for accessing the field via an interface.
func (v *GetCurrentUserViewerUser) GetName() string { return v.Name }

// GetUserMediaByIdMedia includes the requested fields of the GraphQL type Media.
// The GraphQL type's documentation follows.
//
// Anime or Manga
type GetUserMediaByIdMedia struct {
	MediaEntry `json:"-"`
}

// GetVolumes returns GetUserMediaByIdMedia.Volumes, and is useful for accessing the field via an interface.
func (v *GetUserMediaByIdMedia) GetVolumes() int { return v.MediaEntry.Volumes }

// GetChapters returns GetUserMediaByIdMedia.Chapters, and is useful for accessing the field via an interface.
func (v *GetUserMediaByIdMedia) GetChapters() int { return v.MediaEntry.Chapters }

// GetMediaListEntry returns GetUserMediaByIdMedia.MediaListEntry, and is useful for accessing the field via an interface.
func (v *GetUserMediaByIdMedia) GetMediaListEntry() MediaEntryMediaListEntryMediaList {
	return v.MediaEntry.MediaListEntry
}

// GetTitle returns GetUserMediaByIdMedia.Title, and is useful for accessing the field via an interface.
func (v *GetUserMediaByIdMedia) GetTitle() MediaEntryTitleMediaTitle { return v.MediaEntry.Title }

func (v *GetUserMediaByIdMedia) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetUserMediaByIdMedia
		graphql.NoUnmarshalJSON
	}
	firstPass.GetUserMediaByIdMedia = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.MediaEntry)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalGetUserMediaByIdMedia struct {
	Volumes int `json:"volumes"`

	Chapters int `json:"chapters"`

	MediaListEntry MediaEntryMediaListEntryMediaList `json:"mediaListEntry"`

	Title MediaEntryTitleMediaTitle `json:"title"`
}

func (v *GetUserMediaByIdMedia) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetUserMediaByIdMedia) __premarshalJSON() (*__premarshalGetUserMediaByIdMedia, error) {
	var retval __premarshalGetUserMediaByIdMedia

	retval.Volumes = v.MediaEntry.Volumes
	retval.Chapters = v.MediaEntry.Chapters
	retval.MediaListEntry = v.MediaEntry.MediaListEntry
	retval.Title = v.MediaEntry.Title
	return &retval, nil
}

// GetUserMediaByIdResponse is returned by GetUserMediaById on success.
type GetUserMediaByIdResponse struct {
	// Media query
	Media GetUserMediaByIdMedia `json:"Media"`
}

// GetMedia returns GetUserMediaByIdResponse.Media, and is useful for accessing the field via an interface.
func (v *GetUserMediaByIdResponse) GetMedia() GetUserMediaByIdMedia { return v.Media }

// GetUserMediaByIdsPage includes the requested fields of the GraphQL type Page.
// The GraphQL type's documentation follows.
//
// Page of data
type GetUserMediaByIdsPage struct {
	Media []GetUserMediaByIdsPageMedia `json:"media"`
}

// GetMedia returns GetUserMediaByIdsPage.Media, and is useful for accessing the field via an interface.
func (v *GetUserMediaByIdsPage) GetMedia() []GetUserMediaByIdsPageMedia { return v.Media }

// GetUserMediaByIdsPageMedia includes the requested fields of the GraphQL type Media.
// The GraphQL type's documentation follows.
//
// Anime or Manga
type GetUserMediaByIdsPageMedia struct {
	MediaEntry `json:"-"`
}

// GetVolumes returns GetUserMediaByIdsPageMedia.Volumes, and is useful for accessing the field via an interface.
func (v *GetUserMediaByIdsPageMedia) GetVolumes() int { return v.MediaEntry.Volumes }

// GetChapters returns GetUserMediaByIdsPageMedia.Chapters, and is useful for accessing the field via an interface.
func (v *GetUserMediaByIdsPageMedia) GetChapters() int { return v.MediaEntry.Chapters }

// GetMediaListEntry returns GetUserMediaByIdsPageMedia.MediaListEntry, and is useful for accessing the field via an interface.
func (v *GetUserMediaByIdsPageMedia) GetMediaListEntry() MediaEntryMediaListEntryMediaList {
	return v.MediaEntry.MediaListEntry
}

// GetTitle returns GetUserMediaByIdsPageMedia.Title, and is useful for accessing the field via an interface.
func (v *GetUserMediaByIdsPageMedia) GetTitle() MediaEntryTitleMediaTitle { return v.MediaEntry.Title }

func (v *GetUserMediaByIdsPageMedia) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetUserMediaByIdsPageMedia
		graphql.NoUnmarshalJSON
	}
	firstPass.GetUserMediaByIdsPageMedia = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.MediaEntry)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalGetUserMediaByIdsPageMedia struct {
	Volumes int `json:"volumes"`

	Chapters int `json:"chapters"`

	MediaListEntry MediaEntryMediaListEntryMediaList `json:"mediaListEntry"`

	Title MediaEntryTitleMediaTitle `json:"title"`
}

func (v *GetUserMediaByIdsPageMedia) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetUserMediaByIdsPageMedia) __premarshalJSON() (*__premarshalGetUserMediaByIdsPageMedia, error) {
	var retval __premarshalGetUserMediaByIdsPageMedia

	retval.Volumes = v.MediaEntry.Volumes
	retval.Chapters = v.MediaEntry.Chapters
	retval.MediaListEntry = v.MediaEntry.MediaListEntry
	retval.Title = v.MediaEntry.Title
	return &retval, nil
}

// GetUserMediaByIdsResponse is returned by GetUserMediaByIds on success.
type GetUserMediaByIdsResponse struct {
	Page GetUserMediaByIdsPage `json:"Page"`
}

// GetPage returns GetUserMediaByIdsResponse.Page, and is useful for accessing the field via an interface.
func (v *GetUserMediaByIdsResponse) GetPage() GetUserMediaByIdsPage { return v.Page }

// MediaEntry includes the GraphQL fields of Media requested by the fragment MediaEntry.
// The GraphQL type's documentation follows.
//
// Anime or Manga
type MediaEntry struct {
	// The amount of volumes the manga has when complete
	Volumes int `json:"volumes"`
	// The amount of chapters the manga has when complete
	Chapters int `json:"chapters"`
	// The authenticated user's media list entry for the media
	MediaListEntry MediaEntryMediaListEntryMediaList `json:"mediaListEntry"`
	// The official titles of the media in various languages
	Title MediaEntryTitleMediaTitle `json:"title"`
}

// GetVolumes returns MediaEntry.Volumes, and is useful for accessing the field via an interface.
func (v *MediaEntry) GetVolumes() int { return v.Volumes }

// GetChapters returns MediaEntry.Chapters, and is useful for accessing the field via an interface.
func (v *MediaEntry) GetChapters() int { return v.Chapters }

// GetMediaListEntry returns MediaEntry.MediaListEntry, and is useful for accessing the field via an interface.
func (v *MediaEntry) GetMediaListEntry() MediaEntryMediaListEntryMediaList { return v.MediaListEntry }

// GetTitle returns MediaEntry.Title, and is useful for accessing the field via an interface.
func (v *MediaEntry) GetTitle() MediaEntryTitleMediaTitle { return v.Title }

// MediaEntryMediaListEntryMediaList includes the requested fields of the GraphQL type MediaList.
// The GraphQL type's documentation follows.
//
// List of anime or manga
type MediaEntryMediaListEntryMediaList struct {
	// The amount of volumes read by the user
	ProgressVolumes int `json:"progressVolumes"`
	// The amount of episodes/chapters consumed by the user
	Progress int `json:"progress"`
	// The watching/reading status
	Status MediaListStatus `json:"status"`
}

// GetProgressVolumes returns MediaEntryMediaListEntryMediaList.ProgressVolumes, and is useful for accessing the field via an interface.
func (v *MediaEntryMediaListEntryMediaList) GetProgressVolumes() int { return v.ProgressVolumes }

// GetProgress returns MediaEntryMediaListEntryMediaList.Progress, and is useful for accessing the field via an interface.
func (v *MediaEntryMediaListEntryMediaList) GetProgress() int { return v.Progress }

// GetStatus returns MediaEntryMediaListEntryMediaList.Status, and is useful for accessing the field via an interface.
func (v *MediaEntryMediaListEntryMediaList) GetStatus() MediaListStatus { return v.Status }

// MediaEntryTitleMediaTitle includes the requested fields of the GraphQL type MediaTitle.
// The GraphQL type's documentation follows.
//
// The official titles of the media in various languages
type MediaEntryTitleMediaTitle struct {
	// The currently authenticated users preferred title language. Default romaji for non-authenticated
	UserPreferred string `json:"userPreferred"`
}

// GetUserPreferred returns MediaEntryTitleMediaTitle.UserPreferred, and is useful for accessing the field via an interface.
func (v *MediaEntryTitleMediaTitle) GetUserPreferred() string { return v.UserPreferred }

// Media list watching/reading status enum.
type MediaListStatus string

const (
	// Currently watching/reading
	MediaListStatusCurrent MediaListStatus = "CURRENT"
	// Planning to watch/read
	MediaListStatusPlanning MediaListStatus = "PLANNING"
	// Finished watching/reading
	MediaListStatusCompleted MediaListStatus = "COMPLETED"
	// Stopped watching/reading before completing
	MediaListStatusDropped MediaListStatus = "DROPPED"
	// Paused watching/reading
	MediaListStatusPaused MediaListStatus = "PAUSED"
	// Re-watching/reading
	MediaListStatusRepeating MediaListStatus = "REPEATING"
)

var AllMediaListStatus = []MediaListStatus{
	MediaListStatusCurrent,
	MediaListStatusPlanning,
	MediaListStatusCompleted,
	MediaListStatusDropped,
	MediaListStatusPaused,
	MediaListStatusRepeating,
}

// UpdateProgressResponse is returned by UpdateProgress on success.
type UpdateProgressResponse struct {
	// Create or update a media list entry
	SaveMediaListEntry UpdateProgressSaveMediaListEntryMediaList `json:"SaveMediaListEntry"`
}

// GetSaveMediaListEntry returns UpdateProgressResponse.SaveMediaListEntry, and is useful for accessing the field via an interface.
func (v *UpdateProgressResponse) GetSaveMediaListEntry() UpdateProgressSaveMediaListEntryMediaList {
	return v.SaveMediaListEntry
}

// UpdateProgressSaveMediaListEntryMediaList includes the requested fields of the GraphQL type MediaList.
// The GraphQL type's documentation follows.
//
// List of anime or manga
type UpdateProgressSaveMediaListEntryMediaList struct {
	// The id of the list entry
	Id int `json:"id"`
	// The id of the media
	MediaId int `json:"mediaId"`
	// The amount of episodes/chapters consumed by the user
	Progress int `json:"progress"`
	// The amount of volumes read by the user
	ProgressVolumes int `json:"progressVolumes"`
	// The watching/reading status
	Status MediaListStatus `json:"status"`
}

// GetId returns UpdateProgressSaveMediaListEntryMediaList.Id, and is useful for accessing the field via an interface.
func (v *UpdateProgressSaveMediaListEntryMediaList) GetId() int { return v.Id }

// GetMediaId returns UpdateProgressSaveMediaListEntryMediaList.MediaId, and is useful for accessing the field via an interface.
func (v *UpdateProgressSaveMediaListEntryMediaList) GetMediaId() int { return v.MediaId }

// GetProgress returns UpdateProgressSaveMediaListEntryMediaList.Progress, and is useful for accessing the field via an interface.
func (v *UpdateProgressSaveMediaListEntryMediaList) GetProgress() int { return v.Progress }

// GetProgressVolumes returns UpdateProgressSaveMediaListEntryMediaList.ProgressVolumes, and is useful for accessing the field via an interface.
func (v *UpdateProgressSaveMediaListEntryMediaList) GetProgressVolumes() int {
	return v.ProgressVolumes
}

// GetStatus returns UpdateProgressSaveMediaListEntryMediaList.Status, and is useful for accessing the field via an interface.
func (v *UpdateProgressSaveMediaListEntryMediaList) GetStatus() MediaListStatus { return v.Status }

// __GetUserMediaByIdInput is used internally by genqlient
type __GetUserMediaByIdInput struct {
	MediaId int `json:"mediaId"`
}

// GetMediaId returns __GetUserMediaByIdInput.MediaId, and is useful for accessing the field via an interface.
func (v *__GetUserMediaByIdInput) GetMediaId() int { return v.MediaId }

// __GetUserMediaByIdsInput is used internally by genqlient
type __GetUserMediaByIdsInput struct {
	MediaIds []int `json:"mediaIds"`
}

// GetMediaIds returns __GetUserMediaByIdsInput.MediaIds, and is useful for accessing the field via an interface.
func (v *__GetUserMediaByIdsInput) GetMediaIds() []int { return v.MediaIds }

// __UpdateProgressInput is used internally by genqlient
type __UpdateProgressInput struct {
	MediaId         int             `json:"mediaId"`
	Progress        int             `json:"progress"`
	ProgressVolumes int             `json:"progressVolumes"`
	Status          MediaListStatus `json:"status"`
}

// GetMediaId returns __UpdateProgressInput.MediaId, and is useful for accessing the field via an interface.
func (v *__UpdateProgressInput) GetMediaId() int { return v.MediaId }

// GetProgress returns __UpdateProgressInput.Progress, and is useful for accessing the field via an interface.
func (v *__UpdateProgressInput) GetProgress() int { return v.Progress }

// GetProgressVolumes returns __UpdateProgressInput.ProgressVolumes, and is useful for accessing the field via an interface.
func (v *__UpdateProgressInput) GetProgressVolumes() int { return v.ProgressVolumes }

// GetStatus returns __UpdateProgressInput.Status, and is useful for accessing the field via an interface.
func (v *__UpdateProgressInput) GetStatus() MediaListStatus { return v.Status }

// The query executed by GetCurrentUser.
const GetCurrentUser_Operation = `
query GetCurrentUser {
	Viewer {
		id
		name
	}
}
`

func GetCurrentUser(
	ctx_ context.Context,
) (data_ *GetCurrentUserResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "GetCurrentUser",
		Query:  GetCurrentUser_Operation,
	}
	var client_ graphql.Client

	client_, err_ = GetClient(ctx_)
	if err_ != nil {
		return nil, err_
	}

	data_ = &GetCurrentUserResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by GetUserMediaById.
const GetUserMediaById_Operation = `
query GetUserMediaById ($mediaId: Int) {
	Media(id: $mediaId, type: MANGA) {
		... MediaEntry
	}
}
fragment MediaEntry on Media {
	volumes
	chapters
	mediaListEntry {
		progressVolumes
		progress
		status
	}
	title {
		userPreferred
	}
}
`

func GetUserMediaById(
	ctx_ context.Context,
	mediaId int,
) (data_ *GetUserMediaByIdResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "GetUserMediaById",
		Query:  GetUserMediaById_Operation,
		Variables: &__GetUserMediaByIdInput{
			MediaId: mediaId,
		},
	}
	var client_ graphql.Client

	client_, err_ = GetClient(ctx_)
	if err_ != nil {
		return nil, err_
	}

	data_ = &GetUserMediaByIdResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by GetUserMediaByIds.
const GetUserMediaByIds_Operation = `
query GetUserMediaByIds ($mediaIds: [Int]) {
	Page {
		media(id_in: $mediaIds) {
			... MediaEntry
		}
	}
}
fragment MediaEntry on Media {
	volumes
	chapters
	mediaListEntry {
		progressVolumes
		progress
		status
	}
	title {
		userPreferred
	}
}
`

func GetUserMediaByIds(
	ctx_ context.Context,
	mediaIds []int,
) (data_ *GetUserMediaByIdsResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "GetUserMediaByIds",
		Query:  GetUserMediaByIds_Operation,
		Variables: &__GetUserMediaByIdsInput{
			MediaIds: mediaIds,
		},
	}
	var client_ graphql.Client

	client_, err_ = GetClient(ctx_)
	if err_ != nil {
		return nil, err_
	}

	data_ = &GetUserMediaByIdsResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The mutation executed by UpdateProgress.
const UpdateProgress_Operation = `
mutation UpdateProgress ($mediaId: Int, $progress: Int, $progressVolumes: Int, $status: MediaListStatus) {
	SaveMediaListEntry(progress: $progress, progressVolumes: $progressVolumes, mediaId: $mediaId, status: $status) {
		id
		mediaId
		progress
		progressVolumes
		status
	}
}
`

func UpdateProgress(
	ctx_ context.Context,
	mediaId int,
	progress int,
	progressVolumes int,
	status MediaListStatus,
) (data_ *UpdateProgressResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "UpdateProgress",
		Query:  UpdateProgress_Operation,
		Variables: &__UpdateProgressInput{
			MediaId:         mediaId,
			Progress:        progress,
			ProgressVolumes: progressVolumes,
			Status:          status,
		},
	}
	var client_ graphql.Client

	client_, err_ = GetClient(ctx_)
	if err_ != nil {
		return nil, err_
	}

	data_ = &UpdateProgressResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}
